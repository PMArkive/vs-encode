import abc
from .types import AbstractMutableSet, AnyPath
from pathlib import Path
from typing import Any, Callable, Iterable, List, Optional

class _Flavour(metaclass=abc.ABCMeta):
    sep: str
    altsep: str

class VPath(Path):
    def format(self, *args: Any, **kwargs: Any) -> VPath: ...
    def set_track(self, track_number: int) -> VPath: ...
    def to_str(self) -> str: ...
    def append_stem(self, stem: str) -> VPath: ...
    def append_suffix(self, suffix: str) -> VPath: ...
    def copy(self, target: AnyPath, *, follow_symlinks: bool = ...) -> None: ...
    def copy2(self, target: AnyPath, follow_symlinks: bool = ...) -> None: ...
    def copyfile(self, target: VPath, follow_symlinks: bool = ...) -> None: ...
    def copymode(self, target: AnyPath, follow_symlinks: bool = ...) -> None: ...
    def copystat(self, target: AnyPath, follow_symlinks: bool = ...) -> None: ...
    def copytree(self, target: AnyPath, symlinks: bool = ..., ignore: Optional[Callable[[AnyPath, List[str]], Iterable[str]]] = ..., copy_function: Callable[[AnyPath, AnyPath], Any] = ..., ignore_dangling_symlinks: bool = ..., dirs_exist_ok: bool = ...) -> None: ...
    def rmtree(self, ignore_errors: bool = ..., onerror: Optional[Callable[[Callable[..., Any], str, _OptExcInfo], Any]] = ...) -> None: ...
    def rm(self, ignore_errors: bool = ...) -> None: ...

class CleanupSet(AbstractMutableSet[VPath]):
    def clear(self, *, ignore_errors: bool = ...) -> None: ...
    def add(self, value: AnyPath) -> None: ...
    def discard(self, value: VPath) -> None: ...
    def update(self, *s: Iterable[AnyPath]) -> None: ...
