import vapoursynth as vs
from ._logging import logger as logger
from .exception import VSColourRangeError as VSColourRangeError, VSSubsamplingError as VSSubsamplingError
from .types import AnyPath as AnyPath, T as T
from _typeshed import Incomplete
from typing import Any, Callable, Dict, Iterable, List, Tuple, Type, TypeVar

core: Incomplete

class Properties:
    @classmethod
    def get_colour_range(cls, params: List[str], clip: vs.VideoNode) -> Tuple[int, int]: ...
    @staticmethod
    def get_depth(clip: vs.VideoNode) -> int: ...
    @staticmethod
    def get_csp(clip: vs.VideoNode) -> str: ...
    @staticmethod
    def get_encoder_name(path: AnyPath) -> str: ...
    @staticmethod
    def get_matrix_name(frame: vs.VideoFrame, key: str) -> str: ...
    @staticmethod
    def get_prop(frame: vs.VideoFrame, key: str, t: Type[T]) -> T: ...

def recursive_dict(obj: object) -> Union[Dict[str, Any], str]: ...
F = TypeVar('F', bound=Callable[..., Any])

def copy_docstring_from(original: Callable[..., Any], mode: str = ...) -> Callable[[F], F]: ...
def modify_docstring(edit_func: Callable[[str], str]) -> Callable[[F], F]: ...
def modify_docstring_for(fn_name: Union[str, Iterable[str]], edit_func: Callable[[str], str]) -> Callable[[Type[T]], Type[T]]: ...
